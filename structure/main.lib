--!strict
local tween_service: TweenService = game:GetService("TweenService")

local function clean_string(str: string): string
	local tabl = {}

	for i=1,#str do
		tabl[#tabl+1] = string.sub(str,i,i)
	end

	for i=1,#tabl do
		if tabl[i] == " " and tabl[i-1] == " " then
			tabl[i-1] = ""
		end
	end

	return table.concat(tabl)
end

local function do_options(tabl: table?, options: table): table
	if type(tabl) ~= "table" then
		tabl = options
	else
		for i,v in pairs(options) do
			tabl[i] = tabl[i] or options[i]
		end
	end

	return tabl
end

local admin_lib = {
    version = "0.0.5",
    prefix = ";",
    commands = {}
}

admin_lib.tween = function(inst: Instance,tween_info: TweenInfo,props)
    local tween_info: TweenInfo = tween_info or TweenInfo.new(
        .1,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.In,
        0,
        false,
        0
    )

    tween_service:Create(inst,tween_info,props):Play()
end

admin_lib._round = function(num: number, numeros: number): number
    return math.round(num * numeros) / numeros
end

admin_lib.process_string = function(str: string)
    local prefix = admin_lib.prefix

    if not string.sub(str, 1, #prefix) == prefix then return end

    str = string.sub(str, #prefix)
    str = clean_string(str)

	str = string.split(str, " ")
end

admin_lib.add_command = function(names, desc: string, func)
	admin_lib.commands[#admin_lib.commands+1] = {names, desc, func}
end

admin_lib.get_command = function(str: string)
	local commands = admin_lib.commands

	for i=1,#commands do
		if not table.find(commands[i][1], str) then continue end

		return commands[i]
	end
end

return admin_lib
